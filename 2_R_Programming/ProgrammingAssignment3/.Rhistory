find.package("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages("KernSmooth R")
install.packages("KernSmooth R)
;
sd
f
a
f
undo
clear
library(KernSmooth)
library(devtools)
install.packages(devtools)
install.packages("devtools")
install.packages("KernSmooth R")
library(KernSmooth)
library(KernSmooth)
clear
clear
installr()
library(installr)
installr()
library(swirl)
swirl()
getwd()
ls
ls()
x<-9
ls()
list.files()
list.files()
?list.files()
?list.files
args(list.files())
args(list.files)
old.dir<- wdir()
old.dir<- getwdir
old.dir<- getwdir()
old.dir<- getwd()
dir.create("test dir")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path
file.path("mytest.3")
file.path("mytest3")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(filepath("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = true)
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1: 20)
seq(1, 20)
seq(0,10, by=.5)
my_seq<- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times  = 40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char(c("My", "name", "is"))
my_char<-(c("My", "name", "is"))
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <= c(my_char, "Gerardo")
my_name <- c(my_char, "Gerardo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "World, sep = " "")
paste("Hello", "World, sep = " ")
""
paste("Hello", "World", sep = " ")
paste("Hello", "World", sep = " ")
paste("Hello", "World!", sep = " ")
paste("Hello", "World!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("x","Y","Z"),sep = "")
paste(1:3,c("x","Y","Z"),sep = "")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
swirl()
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<- rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
info()
bye()
ls()
paste(ls())
c(ls())
?past
?paste
paste(ls,collapse = " ")
paste(ls(),collapse = " ")
ho <- paste(ls(),collapse = " ")
library(swirl)
swirl()
swirl
swirl()
TRUE = TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
False & False
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins
)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
swirl()
wchich(ints>7)
which(ints>7)
any(ints < 0)
all(ints>0)
2
info()
main
main()
library
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
v<- c(4,5,10)
my_mean(v)
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stdev(),c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(),c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("Im", "Hungry", "For", "Pussy")
submit()
mad_libs("mexico", "huge", "penis")
submit()
submit()
'I' "%p%" 'love' "%p%" 'r'
'I' %p% 'love' %p% 'r'
'I' %p% 'love' %p% 'R!'
bye()
cube <- function(x,n){
x^3}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<10
z<-10
f(3)
?<<-
v1 <- c(1:10)
source('~/R/Coursera/ProgrammingAssignment2/cache_sample.R')
v1 <- c(1:10)
v1c <- makeVector(v1)
v1c
cachemean(v1c)
source('~/R/Coursera/ProgrammingAssignment2/cache_sample.R')
cachemean(v1c)
cachemean(v1c)
v1c <- makeVector(v1)
cachemean(v1c)
source('~/R/Coursera/ProgrammingAssignment2/cache_sample.R')
cachemean(v1c)
v1c <- makeVector(v1)
cachemean(v1c)
cachemean(v1c)
v2 <- c(3,4,5)
v2c <- makeVector(v2)
v1c
v2c
cachemean(v2c)
cachemean(v1c)
cachemean(v2c)
lm()
source('~/R/Coursera/ProgrammingAssignment2/cache_sample.R')
v1 <- c(1:10)
v1c <- makeVector(v1)
source('~/R/Coursera/ProgrammingAssignment2/cache_sample.R')
rm(xx)
v1 <- c(1:10)
v1
v1c <- makeVector(v1)
v1c
getmean(v1c)
cachemean(v1c)
cachemean(v1c)
cachemean(NULL)
sum5 <- function(x) {
x <<- x + 5
print(x)
}
sum5 <- function(x) {
x <<- x + 5
print(x)}
sum5()
x<_2
x<-2
two <- x
rm(x)
sum5(two)
ls()
?matrix
mat <- matrix(1:9, 3, 3)
mat
nrow(mat)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
det(mat)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
mat( c(1,1.5,4.5,2,2.5,5,2,3.2,5.4),3,3)
mat <- matrix( c(1,1.5,4.5,2,2.5,5,2,3.2,5.4),3,3)
mat
det(mat)
mat2 = matrix(1:9,3,3)
m1c <- makeCacheMatrix(mat)
m1c
cacheSolve(m1c)
sol1 <- cacheSolve(m1c)
sol1 <- cacheSolve(m1c)
mat*sol1
mat%%sol1
det(mat2)
m1c <- makeCacheMatrix(mat2)
m2c <- makeCacheMatrix(mat2)
m1c <- makeCacheMatrix(mat)
sol1 <- cacheSolve(m1c)
sol2 <- cacheSolve(m2c)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
sol2 <- cacheSolve(m2c)
sol1 <- cacheSolve(m1c)
inv
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
sol1 <- cacheSolve(m1c)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
sol1 <- cacheSolve(m1c)
debugonce(cacheSolve)
sol1 <- cacheSolve(m1c)
cacheSolve(m1c)
debugonce(cacheSolve)
cacheSolve(m1c)
cacheSolve(m1c)
cacheSolve(m1c)
sol1 <- cacheSolve(m1c)
cacheSolve(m2c)
cacheSolve(m1c)
sol1
sol1 %% mat
sol1 %*% mat
round(sol1 %*% mat)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
setwd("~/R/Coursera/ProgrammingAssignment3")
rankall("pneumonia", 2)
fileName <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- fileName[,c(2,7,11)]}
data <- fileName[,c(2,7,11)]
outputData <- split(data,data$State)
head(outputData, 100)
head(outputData, 3)
head(names(outputData))
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
data[,3] <- suppressWarnings(as.numeric(data[,3]))
data
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
goodVals <- complete.cases(data)
data <-data[goodVals,]
data
head(data)
result1 <-lapply(outputData, function(x) x[order(x[,3],x$Hospital.Name),])
result1
data
head(data,100)
outputData <- split(data,data$State)
head(outputData)
result1 <-lapply(outputData, function(x) x[order(x[,3],x$Hospital.Name),])
head(result1,100)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
output <-sapply(result1, function(x) x[num,1:2])
num = 2
output <-sapply(result1, function(x) x[num,1:2])
output
head(output)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
$sapply
?sapply
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
?data.frame
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
datframe = data.frame(NA, data[1,2])
datframe
names(datFrame)
names(datframe)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
rankall("pneumonia", 2)
head(rankall("heart attack", 20), 10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"),10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("heart failure"),10)
tail(rankall("pneumonia", "worst"),3)
fileName <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
?list.files
data <- fileName[,c(2,7,23)]}
data <- fileName[,c(2,7,23)]
data[,3] <- suppressWarnings(as.numeric(data[,3]))
data <- data[complete.cases(data),]
outputData <- split(data,data$State)
sortedData <-lapply(outputData, function(x) x[order(x[,3],x$Hospital.Name),])
tail(sortedData, 3)
outputSubset<-sortedData[[54]]
outputSubset
nrow(outputSubset)
num = nrow(outputSubset)
output <- outputSubset[num,1:2]
output
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
head(rankall("heart attack", 20), 10)
source('~/R/Coursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"),3)
